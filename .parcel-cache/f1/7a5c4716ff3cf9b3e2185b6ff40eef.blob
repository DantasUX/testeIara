var helpers = require("../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _jsxFileName = "C:\\Users\\danta\\OneDrive\\Documentos\\programacao\\testeIara\\testeiara\\src\\microfone.js", _s = $RefreshSig$();
  exports.default = Microfone = _s(() => {
    _s();
    const [isRecording, setIsRecording] = _react.useState(false);
    const [volume, setVolume] = _react.useState(0);
    const [, setVolumeTimer] = _react.useState(null);
    const [recordingChunks, setRecordingChunks] = _react.useState([]);
    const [, setRecorder] = _react.useState(null);
    const initNotifications = () => {
      setNotifications([notification1, notification2]);
    };
    _react.useEffect(() => {
      initNotifications();
    }, []);
    _react.useEffect(() => {
      isRecording ? startMicrophone() : closeMicrophone();
    }, [isRecording]);
    const startMicrophone = async () => {
      const audioStream = await navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false
      });
      const audioContext = new AudioContext();
      const analyser = audioContext.createAnalyser();
      analyser.fftSize = 1024;
      analyser.smoothingTimeConstant = 0.8;
      const microphone = audioContext.createMediaStreamSource(audioStream);
      microphone.connect(analyser);
      const bufferLength = analyser.frequencyBinCount;
      const sampleArray = new Uint8Array(bufferLength);
      const timer = setInterval(() => {
        analyser.getByteFrequencyData(sampleArray);
        const currentAudioValues = Array.from(sampleArray);
        const mean = currentAudioValues.reduce((prev, curr) => prev + curr) / currentAudioValues.length;
        setVolume(Math.ceil(mean));
      }, 100);
      const recorder = new MediaRecorder(audioStream);
      recorder.start(100);
      recorder.ondataavailable = e => setRecordingChunks(chunks => [...chunks, e.data]);
      setRecorder(recorder);
      setVolumeTimer(timer);
    };
    const closeMicrophone = () => {
      setVolumeTimer(currTimer => {
        clearInterval(currTimer);
        return null;
      });
      setVolume(0);
      setRecorder(currRecorder => {
        if (currRecorder) {
          currRecorder.stop();
        }
        return null;
      });
      if (recordingChunks.length > 0) {
        console.log({
          recordingChunks
        });
        const recording = new Blob(recordingChunks, {
          type: "audio/ogg; codecs=opus"
        });
        const url = URL.createObjectURL(recording);
        downloadBlob(url);
      }
      setRecordingChunks([]);
    };
    const downloadBlob = blobUrl => {
      const a = document.createElement("a");
      a.style = "display: none";
      document.body.appendChild(a);
      a.href = blobUrl;
      a.download = "audio.ogg";
      a.click();
      window.URL.revokeObjectURL(blobUrl);
    };
    const toggleIsRecording = () => setIsRecording(currentIsRecording => !currentIsRecording);
    const toggleShowNotification = () => setShowNotificationPanel(currentShowState => !currentShowState);
    const getOpacity = () => showNotificationPanel ? 1 : 0;
    const cleanNotifications = () => setNotifications([]);
    const hasNotifications = () => notifications.length > 0;
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/_reactDefault.default.createElement("div", {
        className: "flex",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112,
          columnNumber: 5
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("div", {
        style: {
          background: `linear-gradient(90deg, #FF4757 ${volume}%, #212121 ${volume}%)`
        },
        id: "siri-container",
        className: "waves fill--gray3 radius--16",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 113,
          columnNumber: 11
        }
      }), /*#__PURE__*/_reactDefault.default.createElement("button", {
        type: "no--flex button",
        className: "button button--primary shadow--red radius--16 m-l--20",
        onClick: toggleIsRecording,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120,
          columnNumber: 11
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("span", {
        className: "icon microphone--large",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 125,
          columnNumber: 13
        }
      }))))
    );
  }, "cPIMSZhIeuTbiAGGWw8yKezUIjY=");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
